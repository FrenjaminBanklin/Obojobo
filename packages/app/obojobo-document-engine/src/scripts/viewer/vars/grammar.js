/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

'use strict'

function peg$subclass(child, parent) {
	function ctor() {
		this.constructor = child
	}
	ctor.prototype = parent.prototype
	child.prototype = new ctor()
}

function peg$SyntaxError(message, expected, found, location) {
	this.message = message
	this.expected = expected
	this.found = found
	this.location = location
	this.name = 'SyntaxError'

	if (typeof Error.captureStackTrace === 'function') {
		Error.captureStackTrace(this, peg$SyntaxError)
	}
}

peg$subclass(peg$SyntaxError, Error)

peg$SyntaxError.buildMessage = function(expected, found) {
	var DESCRIBE_EXPECTATION_FNS = {
		literal: function(expectation) {
			return '"' + literalEscape(expectation.text) + '"'
		},

		class: function(expectation) {
			var escapedParts = '',
				i

			for (i = 0; i < expectation.parts.length; i++) {
				escapedParts +=
					expectation.parts[i] instanceof Array
						? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
						: classEscape(expectation.parts[i])
			}

			return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
		},

		any: function(expectation) {
			return 'any character'
		},

		end: function(expectation) {
			return 'end of input'
		},

		other: function(expectation) {
			return expectation.description
		}
	}

	function hex(ch) {
		return ch
			.charCodeAt(0)
			.toString(16)
			.toUpperCase()
	}

	function literalEscape(s) {
		return s
			.replace(/\\/g, '\\\\')
			.replace(/"/g, '\\"')
			.replace(/\0/g, '\\0')
			.replace(/\t/g, '\\t')
			.replace(/\n/g, '\\n')
			.replace(/\r/g, '\\r')
			.replace(/[\x00-\x0F]/g, function(ch) {
				return '\\x0' + hex(ch)
			})
			.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
				return '\\x' + hex(ch)
			})
	}

	function classEscape(s) {
		return s
			.replace(/\\/g, '\\\\')
			.replace(/\]/g, '\\]')
			.replace(/\^/g, '\\^')
			.replace(/-/g, '\\-')
			.replace(/\0/g, '\\0')
			.replace(/\t/g, '\\t')
			.replace(/\n/g, '\\n')
			.replace(/\r/g, '\\r')
			.replace(/[\x00-\x0F]/g, function(ch) {
				return '\\x0' + hex(ch)
			})
			.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
				return '\\x' + hex(ch)
			})
	}

	function describeExpectation(expectation) {
		return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
	}

	function describeExpected(expected) {
		var descriptions = new Array(expected.length),
			i,
			j

		for (i = 0; i < expected.length; i++) {
			descriptions[i] = describeExpectation(expected[i])
		}

		descriptions.sort()

		if (descriptions.length > 0) {
			for (i = 1, j = 1; i < descriptions.length; i++) {
				if (descriptions[i - 1] !== descriptions[i]) {
					descriptions[j] = descriptions[i]
					j++
				}
			}
			descriptions.length = j
		}

		switch (descriptions.length) {
			case 1:
				return descriptions[0]

			case 2:
				return descriptions[0] + ' or ' + descriptions[1]

			default:
				return (
					descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1]
				)
		}
	}

	function describeFound(found) {
		return found ? '"' + literalEscape(found) + '"' : 'end of input'
	}

	return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.'
}

function peg$parse(input, options) {
	options = options !== void 0 ? options : {}

	var peg$FAILED = {},
		peg$startRuleFunctions = { formula: peg$parseformula },
		peg$startRuleFunction = peg$parseformula,
		peg$c0 = '+',
		peg$c1 = peg$literalExpectation('+', false),
		peg$c2 = function(left, right) {
			return left + right
		},
		peg$c3 = '-',
		peg$c4 = peg$literalExpectation('-', false),
		peg$c5 = function(left, right) {
			return left - right
		},
		peg$c6 = '*',
		peg$c7 = peg$literalExpectation('*', false),
		peg$c8 = function(left, right) {
			return left * right
		},
		peg$c9 = '/',
		peg$c10 = peg$literalExpectation('/', false),
		peg$c11 = function(left, right) {
			return left / right
		},
		peg$c12 = function(value) {
			return -1 * value
		},
		peg$c13 = '(',
		peg$c14 = peg$literalExpectation('(', false),
		peg$c15 = ')',
		peg$c16 = peg$literalExpectation(')', false),
		peg$c17 = function(additive) {
			return additive
		},
		peg$c18 = 'abs(',
		peg$c19 = peg$literalExpectation('abs(', true),
		peg$c20 = function(n) {
			return Math.abs(n)
		},
		peg$c21 = 'acos(',
		peg$c22 = peg$literalExpectation('acos(', true),
		peg$c23 = function(n) {
			return Math.acos(n)
		},
		peg$c24 = 'asin(',
		peg$c25 = peg$literalExpectation('asin(', true),
		peg$c26 = function(n) {
			return Math.asin(n)
		},
		peg$c27 = 'at(',
		peg$c28 = peg$literalExpectation('at(', true),
		peg$c29 = ',',
		peg$c30 = peg$literalExpectation(',', false),
		peg$c31 = function(list, index) {
			return list[index]
		},
		peg$c32 = 'atan(',
		peg$c33 = peg$literalExpectation('atan(', true),
		peg$c34 = function(n) {
			return Math.atan(n)
		},
		peg$c35 = 'ceil(',
		peg$c36 = peg$literalExpectation('ceil(', true),
		peg$c37 = function(n) {
			return Math.ceil(n)
		},
		peg$c38 = 'comb(',
		peg$c39 = peg$literalExpectation('comb(', true),
		peg$c40 = function(n, k) {
			return combination(n, k)
		},
		peg$c41 = 'cos(',
		peg$c42 = peg$literalExpectation('cos(', true),
		peg$c43 = function(n) {
			return Math.cos(n)
		},
		peg$c44 = 'cosec(',
		peg$c45 = peg$literalExpectation('cosec(', true),
		peg$c46 = function(n) {
			return cosecant(n)
		},
		peg$c47 = 'cotan(',
		peg$c48 = peg$literalExpectation('cotan(', true),
		peg$c49 = function(n) {
			return cotangent(n)
		},
		peg$c50 = 'count(',
		peg$c51 = peg$literalExpectation('count(', true),
		peg$c52 = function(list) {
			return list.length
		},
		peg$c53 = 'deg_to_rad(',
		peg$c54 = peg$literalExpectation('deg_to_rad(', true),
		peg$c55 = function(n) {
			return degToRad(n)
		},
		peg$c56 = 'fact(',
		peg$c57 = peg$literalExpectation('fact(', true),
		peg$c58 = function(n) {
			return factorial(n)
		},
		peg$c59 = 'first(',
		peg$c60 = peg$literalExpectation('first(', true),
		peg$c61 = function(list) {
			return list[0]
		},
		peg$c62 = 'floor(',
		peg$c63 = peg$literalExpectation('floor(', true),
		peg$c64 = function(n) {
			return Math.floor(n)
		},
		peg$c65 = 'if(',
		peg$c66 = peg$literalExpectation('if(', true),
		peg$c67 = function(condition, success, fail) {
			return condition ? success : fail
		},
		peg$c68 = 'last(',
		peg$c69 = peg$literalExpectation('last(', true),
		peg$c70 = function(list) {
			return list[list.length - 1]
		},
		peg$c71 = 'length(',
		peg$c72 = peg$literalExpectation('length(', true),
		peg$c73 = 'ln(',
		peg$c74 = peg$literalExpectation('ln(', true),
		peg$c75 = function(n) {
			return Math.log(n)
		},
		peg$c76 = 'log(',
		peg$c77 = peg$literalExpectation('log(', true),
		peg$c78 = function(n, base_optional) {
			return Math.log(n) / Math.log(base_optional || 10)
		},
		peg$c79 = 'max(',
		peg$c80 = peg$literalExpectation('max(', true),
		peg$c81 = function(list) {
			return Math.max.apply(list)
		},
		peg$c82 = 'mean(',
		peg$c83 = peg$literalExpectation('mean(', true),
		peg$c84 = function(list) {
			return mean(list)
		},
		peg$c85 = 'median(',
		peg$c86 = peg$literalExpectation('median(', true),
		peg$c87 = function(list) {
			return median(list)
		},
		peg$c88 = 'min(',
		peg$c89 = peg$literalExpectation('min(', true),
		peg$c90 = function(list) {
			return Math.min.apply(list)
		},
		peg$c91 = 'ord(',
		peg$c92 = peg$literalExpectation('ord(', true),
		peg$c93 = function(n) {
			return numberToWords.toOrdinal(n)
		},
		peg$c94 = 'perm(',
		peg$c95 = peg$literalExpectation('perm(', true),
		peg$c96 = function(n, k) {
			return permutation(n, k)
		},
		peg$c97 = 'pi()',
		peg$c98 = peg$literalExpectation('pi()', false),
		peg$c99 = function() {
			return Math.PI
		},
		peg$c100 = 'pow(',
		peg$c101 = peg$literalExpectation('pow(', true),
		peg$c102 = function(n, exponent) {
			return Math.pow(n, exponent)
		},
		peg$c103 = 'rad_to_deg(',
		peg$c104 = peg$literalExpectation('rad_to_deg(', true),
		peg$c105 = function(n) {
			return radToDeg(n)
		},
		peg$c106 = 'range(',
		peg$c107 = peg$literalExpectation('range(', true),
		peg$c108 = function(list) {
			return range(list)
		},
		peg$c109 = 'reverse(',
		peg$c110 = peg$literalExpectation('reverse(', true),
		peg$c111 = function(list) {
			return [].concat(list).reverse()
		},
		peg$c112 = 'round(',
		peg$c113 = peg$literalExpectation('round(', true),
		peg$c114 = function(n) {
			return Math.round(n)
		},
		peg$c115 = 'sec(',
		peg$c116 = peg$literalExpectation('sec(', true),
		peg$c117 = 'sin(',
		peg$c118 = peg$literalExpectation('sin(', true),
		peg$c119 = function(n) {
			return Math.sin(n)
		},
		peg$c120 = 'sort(',
		peg$c121 = peg$literalExpectation('sort(', true),
		peg$c122 = function(list) {
			return [].concat(list).sort()
		},
		peg$c123 = 'sqrt(',
		peg$c124 = peg$literalExpectation('sqrt(', true),
		peg$c125 = function(n) {
			return Math.sqrt(n)
		},
		peg$c126 = 'stddev(',
		peg$c127 = peg$literalExpectation('stddev(', true),
		peg$c128 = function(list) {
			return standardDeviation(list)
		},
		peg$c129 = 'sum(',
		peg$c130 = peg$literalExpectation('sum(', true),
		peg$c131 = function(list) {
			return list.reduce((acc, v) => v + (acc || 0))
		},
		peg$c132 = 'tan(',
		peg$c133 = peg$literalExpectation('tan(', true),
		peg$c134 = function(n) {
			return Math.tan(n)
		},
		peg$c135 = 'num_to_words(',
		peg$c136 = peg$literalExpectation('num_to_words(', true),
		peg$c137 = function(n) {
			return numberToWords.toWords(n)
		},
		peg$c138 = 'num_to_words_ord(',
		peg$c139 = peg$literalExpectation('num_to_words_ord(', true),
		peg$c140 = function(n) {
			return numberToWords.toWordsOrdinal(n)
		},
		peg$c141 = '[',
		peg$c142 = peg$literalExpectation('[', false),
		peg$c143 = ']',
		peg$c144 = peg$literalExpectation(']', false),
		peg$c145 = function(listElements) {
			return listElements
		},
		peg$c146 = function(additive, listElements) {
			return [additive].concat(listElements)
		},
		peg$c147 = 'e',
		peg$c148 = peg$literalExpectation('e', false),
		peg$c149 = function() {
			return constants.e
		},
		peg$c150 = 'pi',
		peg$c151 = peg$literalExpectation('pi', true),
		peg$c152 = function() {
			return constants.pi
		},
		peg$c153 = '.',
		peg$c154 = peg$literalExpectation('.', false),
		peg$c155 = function(left, right) {
			return parseFloat(`${left}.${right}`)
		},
		peg$c156 = /^[0-9]/,
		peg$c157 = peg$classExpectation([['0', '9']], false, false),
		peg$c158 = function(digits) {
			return parseInt(digits.join(''), 10)
		},
		peg$c159 = function(name, index) {
			return options.vars[name][index]
		},
		peg$c160 = function(name) {
			return options.vars[name] ? options.vars[name] : constants[name.toLowerCase()]
		},
		peg$c161 = /^[A-Za-z_]/,
		peg$c162 = peg$classExpectation([['A', 'Z'], ['a', 'z'], '_'], false, false),
		peg$c163 = /^[A-Za-z_0-9]/,
		peg$c164 = peg$classExpectation([['A', 'Z'], ['a', 'z'], '_', ['0', '9']], false, false),
		peg$c165 = function(firstChar, lastChars) {
			return firstChar + lastChars.join('')
		},
		peg$currPos = 0,
		peg$savedPos = 0,
		peg$posDetailsCache = [{ line: 1, column: 1 }],
		peg$maxFailPos = 0,
		peg$maxFailExpected = [],
		peg$silentFails = 0,
		peg$result

	if ('startRule' in options) {
		if (!(options.startRule in peg$startRuleFunctions)) {
			throw new Error('Can\'t start parsing from rule "' + options.startRule + '".')
		}

		peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
	}

	function text() {
		return input.substring(peg$savedPos, peg$currPos)
	}

	function location() {
		return peg$computeLocation(peg$savedPos, peg$currPos)
	}

	function expected(description, location) {
		location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

		throw peg$buildStructuredError(
			[peg$otherExpectation(description)],
			input.substring(peg$savedPos, peg$currPos),
			location
		)
	}

	function error(message, location) {
		location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

		throw peg$buildSimpleError(message, location)
	}

	function peg$literalExpectation(text, ignoreCase) {
		return { type: 'literal', text: text, ignoreCase: ignoreCase }
	}

	function peg$classExpectation(parts, inverted, ignoreCase) {
		return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase }
	}

	function peg$anyExpectation() {
		return { type: 'any' }
	}

	function peg$endExpectation() {
		return { type: 'end' }
	}

	function peg$otherExpectation(description) {
		return { type: 'other', description: description }
	}

	function peg$computePosDetails(pos) {
		var details = peg$posDetailsCache[pos],
			p

		if (details) {
			return details
		} else {
			p = pos - 1
			while (!peg$posDetailsCache[p]) {
				p--
			}

			details = peg$posDetailsCache[p]
			details = {
				line: details.line,
				column: details.column
			}

			while (p < pos) {
				if (input.charCodeAt(p) === 10) {
					details.line++
					details.column = 1
				} else {
					details.column++
				}

				p++
			}

			peg$posDetailsCache[pos] = details
			return details
		}
	}

	function peg$computeLocation(startPos, endPos) {
		var startPosDetails = peg$computePosDetails(startPos),
			endPosDetails = peg$computePosDetails(endPos)

		return {
			start: {
				offset: startPos,
				line: startPosDetails.line,
				column: startPosDetails.column
			},
			end: {
				offset: endPos,
				line: endPosDetails.line,
				column: endPosDetails.column
			}
		}
	}

	function peg$fail(expected) {
		if (peg$currPos < peg$maxFailPos) {
			return
		}

		if (peg$currPos > peg$maxFailPos) {
			peg$maxFailPos = peg$currPos
			peg$maxFailExpected = []
		}

		peg$maxFailExpected.push(expected)
	}

	function peg$buildSimpleError(message, location) {
		return new peg$SyntaxError(message, null, null, location)
	}

	function peg$buildStructuredError(expected, found, location) {
		return new peg$SyntaxError(
			peg$SyntaxError.buildMessage(expected, found),
			expected,
			found,
			location
		)
	}

	function peg$parseformula() {
		var s0

		s0 = peg$parseadditive()

		return s0
	}

	function peg$parseadditive() {
		var s0, s1, s2, s3

		s0 = peg$currPos
		s1 = peg$parsemultiplicative()
		if (s1 !== peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 43) {
				s2 = peg$c0
				peg$currPos++
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c1)
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parseadditive()
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c2(s1, s3)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			s1 = peg$parsemultiplicative()
			if (s1 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 45) {
					s2 = peg$c3
					peg$currPos++
				} else {
					s2 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c4)
					}
				}
				if (s2 !== peg$FAILED) {
					s3 = peg$parseadditive()
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c5(s1, s3)
						s0 = s1
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parsemultiplicative()
			}
		}

		return s0
	}

	function peg$parsemultiplicative() {
		var s0, s1, s2, s3

		s0 = peg$currPos
		s1 = peg$parseprimary()
		if (s1 !== peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 42) {
				s2 = peg$c6
				peg$currPos++
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c7)
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parsemultiplicative()
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c8(s1, s3)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			s1 = peg$parseprimary()
			if (s1 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 47) {
					s2 = peg$c9
					peg$currPos++
				} else {
					s2 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c10)
					}
				}
				if (s2 !== peg$FAILED) {
					s3 = peg$parsemultiplicative()
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c11(s1, s3)
						s0 = s1
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parseprimary()
			}
		}

		return s0
	}

	function peg$parseprimary() {
		var s0, s1, s2

		s0 = peg$currPos
		if (input.charCodeAt(peg$currPos) === 45) {
			s1 = peg$c3
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c4)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parsevalue()
			if (s2 !== peg$FAILED) {
				peg$savedPos = s0
				s1 = peg$c12(s2)
				s0 = s1
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parsevalue()
		}

		return s0
	}

	function peg$parsevalue() {
		var s0, s1, s2, s3

		s0 = peg$parsefn()
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			if (input.charCodeAt(peg$currPos) === 40) {
				s1 = peg$c13
				peg$currPos++
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c14)
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parseadditive()
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 41) {
						s3 = peg$c15
						peg$currPos++
					} else {
						s3 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c16)
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c17(s2)
						s0 = s1
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
			if (s0 === peg$FAILED) {
				s0 = peg$parseatom()
			}
		}

		return s0
	}

	function peg$parsefn() {
		var s0, s1, s2, s3, s4, s5, s6, s7

		s0 = peg$currPos
		if (input.substr(peg$currPos, 4).toLowerCase() === peg$c18) {
			s1 = input.substr(peg$currPos, 4)
			peg$currPos += 4
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c19)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parseadditive()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 41) {
					s3 = peg$c15
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c16)
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c20(s2)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			if (input.substr(peg$currPos, 5).toLowerCase() === peg$c21) {
				s1 = input.substr(peg$currPos, 5)
				peg$currPos += 5
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c22)
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parseadditive()
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 41) {
						s3 = peg$c15
						peg$currPos++
					} else {
						s3 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c16)
						}
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c23(s2)
						s0 = s1
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
			if (s0 === peg$FAILED) {
				s0 = peg$currPos
				if (input.substr(peg$currPos, 5).toLowerCase() === peg$c24) {
					s1 = input.substr(peg$currPos, 5)
					peg$currPos += 5
				} else {
					s1 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c25)
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parseadditive()
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 41) {
							s3 = peg$c15
							peg$currPos++
						} else {
							s3 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c16)
							}
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c26(s2)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
				if (s0 === peg$FAILED) {
					s0 = peg$currPos
					if (input.substr(peg$currPos, 3).toLowerCase() === peg$c27) {
						s1 = input.substr(peg$currPos, 3)
						peg$currPos += 3
					} else {
						s1 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c28)
						}
					}
					if (s1 !== peg$FAILED) {
						s2 = peg$parselist()
						if (s2 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 44) {
								s3 = peg$c29
								peg$currPos++
							} else {
								s3 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c30)
								}
							}
							if (s3 !== peg$FAILED) {
								s4 = peg$parseadditive()
								if (s4 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 41) {
										s5 = peg$c15
										peg$currPos++
									} else {
										s5 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c16)
										}
									}
									if (s5 !== peg$FAILED) {
										peg$savedPos = s0
										s1 = peg$c31(s2, s4)
										s0 = s1
									} else {
										peg$currPos = s0
										s0 = peg$FAILED
									}
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
					if (s0 === peg$FAILED) {
						s0 = peg$currPos
						if (input.substr(peg$currPos, 5).toLowerCase() === peg$c32) {
							s1 = input.substr(peg$currPos, 5)
							peg$currPos += 5
						} else {
							s1 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c33)
							}
						}
						if (s1 !== peg$FAILED) {
							s2 = peg$parseadditive()
							if (s2 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 41) {
									s3 = peg$c15
									peg$currPos++
								} else {
									s3 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c16)
									}
								}
								if (s3 !== peg$FAILED) {
									peg$savedPos = s0
									s1 = peg$c34(s2)
									s0 = s1
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
						if (s0 === peg$FAILED) {
							s0 = peg$currPos
							if (input.substr(peg$currPos, 5).toLowerCase() === peg$c35) {
								s1 = input.substr(peg$currPos, 5)
								peg$currPos += 5
							} else {
								s1 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c36)
								}
							}
							if (s1 !== peg$FAILED) {
								s2 = peg$parseadditive()
								if (s2 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 41) {
										s3 = peg$c15
										peg$currPos++
									} else {
										s3 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c16)
										}
									}
									if (s3 !== peg$FAILED) {
										peg$savedPos = s0
										s1 = peg$c37(s2)
										s0 = s1
									} else {
										peg$currPos = s0
										s0 = peg$FAILED
									}
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
							if (s0 === peg$FAILED) {
								s0 = peg$currPos
								if (input.substr(peg$currPos, 5).toLowerCase() === peg$c38) {
									s1 = input.substr(peg$currPos, 5)
									peg$currPos += 5
								} else {
									s1 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c39)
									}
								}
								if (s1 !== peg$FAILED) {
									s2 = peg$parseadditive()
									if (s2 !== peg$FAILED) {
										if (input.charCodeAt(peg$currPos) === 44) {
											s3 = peg$c29
											peg$currPos++
										} else {
											s3 = peg$FAILED
											if (peg$silentFails === 0) {
												peg$fail(peg$c30)
											}
										}
										if (s3 !== peg$FAILED) {
											s4 = peg$parseadditive()
											if (s4 !== peg$FAILED) {
												if (input.charCodeAt(peg$currPos) === 41) {
													s5 = peg$c15
													peg$currPos++
												} else {
													s5 = peg$FAILED
													if (peg$silentFails === 0) {
														peg$fail(peg$c16)
													}
												}
												if (s5 !== peg$FAILED) {
													peg$savedPos = s0
													s1 = peg$c40(s2, s4)
													s0 = s1
												} else {
													peg$currPos = s0
													s0 = peg$FAILED
												}
											} else {
												peg$currPos = s0
												s0 = peg$FAILED
											}
										} else {
											peg$currPos = s0
											s0 = peg$FAILED
										}
									} else {
										peg$currPos = s0
										s0 = peg$FAILED
									}
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
								if (s0 === peg$FAILED) {
									s0 = peg$currPos
									if (input.substr(peg$currPos, 4).toLowerCase() === peg$c41) {
										s1 = input.substr(peg$currPos, 4)
										peg$currPos += 4
									} else {
										s1 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c42)
										}
									}
									if (s1 !== peg$FAILED) {
										s2 = peg$parseadditive()
										if (s2 !== peg$FAILED) {
											if (input.charCodeAt(peg$currPos) === 41) {
												s3 = peg$c15
												peg$currPos++
											} else {
												s3 = peg$FAILED
												if (peg$silentFails === 0) {
													peg$fail(peg$c16)
												}
											}
											if (s3 !== peg$FAILED) {
												peg$savedPos = s0
												s1 = peg$c43(s2)
												s0 = s1
											} else {
												peg$currPos = s0
												s0 = peg$FAILED
											}
										} else {
											peg$currPos = s0
											s0 = peg$FAILED
										}
									} else {
										peg$currPos = s0
										s0 = peg$FAILED
									}
									if (s0 === peg$FAILED) {
										s0 = peg$currPos
										if (input.substr(peg$currPos, 6).toLowerCase() === peg$c44) {
											s1 = input.substr(peg$currPos, 6)
											peg$currPos += 6
										} else {
											s1 = peg$FAILED
											if (peg$silentFails === 0) {
												peg$fail(peg$c45)
											}
										}
										if (s1 !== peg$FAILED) {
											s2 = peg$parseadditive()
											if (s2 !== peg$FAILED) {
												if (input.charCodeAt(peg$currPos) === 41) {
													s3 = peg$c15
													peg$currPos++
												} else {
													s3 = peg$FAILED
													if (peg$silentFails === 0) {
														peg$fail(peg$c16)
													}
												}
												if (s3 !== peg$FAILED) {
													peg$savedPos = s0
													s1 = peg$c46(s2)
													s0 = s1
												} else {
													peg$currPos = s0
													s0 = peg$FAILED
												}
											} else {
												peg$currPos = s0
												s0 = peg$FAILED
											}
										} else {
											peg$currPos = s0
											s0 = peg$FAILED
										}
										if (s0 === peg$FAILED) {
											s0 = peg$currPos
											if (input.substr(peg$currPos, 6).toLowerCase() === peg$c47) {
												s1 = input.substr(peg$currPos, 6)
												peg$currPos += 6
											} else {
												s1 = peg$FAILED
												if (peg$silentFails === 0) {
													peg$fail(peg$c48)
												}
											}
											if (s1 !== peg$FAILED) {
												s2 = peg$parseadditive()
												if (s2 !== peg$FAILED) {
													if (input.charCodeAt(peg$currPos) === 41) {
														s3 = peg$c15
														peg$currPos++
													} else {
														s3 = peg$FAILED
														if (peg$silentFails === 0) {
															peg$fail(peg$c16)
														}
													}
													if (s3 !== peg$FAILED) {
														peg$savedPos = s0
														s1 = peg$c49(s2)
														s0 = s1
													} else {
														peg$currPos = s0
														s0 = peg$FAILED
													}
												} else {
													peg$currPos = s0
													s0 = peg$FAILED
												}
											} else {
												peg$currPos = s0
												s0 = peg$FAILED
											}
											if (s0 === peg$FAILED) {
												s0 = peg$currPos
												if (input.substr(peg$currPos, 6).toLowerCase() === peg$c50) {
													s1 = input.substr(peg$currPos, 6)
													peg$currPos += 6
												} else {
													s1 = peg$FAILED
													if (peg$silentFails === 0) {
														peg$fail(peg$c51)
													}
												}
												if (s1 !== peg$FAILED) {
													s2 = peg$parselist()
													if (s2 !== peg$FAILED) {
														if (input.charCodeAt(peg$currPos) === 41) {
															s3 = peg$c15
															peg$currPos++
														} else {
															s3 = peg$FAILED
															if (peg$silentFails === 0) {
																peg$fail(peg$c16)
															}
														}
														if (s3 !== peg$FAILED) {
															peg$savedPos = s0
															s1 = peg$c52(s2)
															s0 = s1
														} else {
															peg$currPos = s0
															s0 = peg$FAILED
														}
													} else {
														peg$currPos = s0
														s0 = peg$FAILED
													}
												} else {
													peg$currPos = s0
													s0 = peg$FAILED
												}
												if (s0 === peg$FAILED) {
													s0 = peg$currPos
													if (input.substr(peg$currPos, 11).toLowerCase() === peg$c53) {
														s1 = input.substr(peg$currPos, 11)
														peg$currPos += 11
													} else {
														s1 = peg$FAILED
														if (peg$silentFails === 0) {
															peg$fail(peg$c54)
														}
													}
													if (s1 !== peg$FAILED) {
														s2 = peg$parseadditive()
														if (s2 !== peg$FAILED) {
															if (input.charCodeAt(peg$currPos) === 41) {
																s3 = peg$c15
																peg$currPos++
															} else {
																s3 = peg$FAILED
																if (peg$silentFails === 0) {
																	peg$fail(peg$c16)
																}
															}
															if (s3 !== peg$FAILED) {
																peg$savedPos = s0
																s1 = peg$c55(s2)
																s0 = s1
															} else {
																peg$currPos = s0
																s0 = peg$FAILED
															}
														} else {
															peg$currPos = s0
															s0 = peg$FAILED
														}
													} else {
														peg$currPos = s0
														s0 = peg$FAILED
													}
													if (s0 === peg$FAILED) {
														s0 = peg$currPos
														if (input.substr(peg$currPos, 5).toLowerCase() === peg$c56) {
															s1 = input.substr(peg$currPos, 5)
															peg$currPos += 5
														} else {
															s1 = peg$FAILED
															if (peg$silentFails === 0) {
																peg$fail(peg$c57)
															}
														}
														if (s1 !== peg$FAILED) {
															s2 = peg$parseadditive()
															if (s2 !== peg$FAILED) {
																if (input.charCodeAt(peg$currPos) === 41) {
																	s3 = peg$c15
																	peg$currPos++
																} else {
																	s3 = peg$FAILED
																	if (peg$silentFails === 0) {
																		peg$fail(peg$c16)
																	}
																}
																if (s3 !== peg$FAILED) {
																	peg$savedPos = s0
																	s1 = peg$c58(s2)
																	s0 = s1
																} else {
																	peg$currPos = s0
																	s0 = peg$FAILED
																}
															} else {
																peg$currPos = s0
																s0 = peg$FAILED
															}
														} else {
															peg$currPos = s0
															s0 = peg$FAILED
														}
														if (s0 === peg$FAILED) {
															s0 = peg$currPos
															if (input.substr(peg$currPos, 6).toLowerCase() === peg$c59) {
																s1 = input.substr(peg$currPos, 6)
																peg$currPos += 6
															} else {
																s1 = peg$FAILED
																if (peg$silentFails === 0) {
																	peg$fail(peg$c60)
																}
															}
															if (s1 !== peg$FAILED) {
																s2 = peg$parselist()
																if (s2 !== peg$FAILED) {
																	if (input.charCodeAt(peg$currPos) === 41) {
																		s3 = peg$c15
																		peg$currPos++
																	} else {
																		s3 = peg$FAILED
																		if (peg$silentFails === 0) {
																			peg$fail(peg$c16)
																		}
																	}
																	if (s3 !== peg$FAILED) {
																		peg$savedPos = s0
																		s1 = peg$c61(s2)
																		s0 = s1
																	} else {
																		peg$currPos = s0
																		s0 = peg$FAILED
																	}
																} else {
																	peg$currPos = s0
																	s0 = peg$FAILED
																}
															} else {
																peg$currPos = s0
																s0 = peg$FAILED
															}
															if (s0 === peg$FAILED) {
																s0 = peg$currPos
																if (input.substr(peg$currPos, 6).toLowerCase() === peg$c62) {
																	s1 = input.substr(peg$currPos, 6)
																	peg$currPos += 6
																} else {
																	s1 = peg$FAILED
																	if (peg$silentFails === 0) {
																		peg$fail(peg$c63)
																	}
																}
																if (s1 !== peg$FAILED) {
																	s2 = peg$parseadditive()
																	if (s2 !== peg$FAILED) {
																		if (input.charCodeAt(peg$currPos) === 41) {
																			s3 = peg$c15
																			peg$currPos++
																		} else {
																			s3 = peg$FAILED
																			if (peg$silentFails === 0) {
																				peg$fail(peg$c16)
																			}
																		}
																		if (s3 !== peg$FAILED) {
																			peg$savedPos = s0
																			s1 = peg$c64(s2)
																			s0 = s1
																		} else {
																			peg$currPos = s0
																			s0 = peg$FAILED
																		}
																	} else {
																		peg$currPos = s0
																		s0 = peg$FAILED
																	}
																} else {
																	peg$currPos = s0
																	s0 = peg$FAILED
																}
																if (s0 === peg$FAILED) {
																	s0 = peg$currPos
																	if (input.substr(peg$currPos, 3).toLowerCase() === peg$c65) {
																		s1 = input.substr(peg$currPos, 3)
																		peg$currPos += 3
																	} else {
																		s1 = peg$FAILED
																		if (peg$silentFails === 0) {
																			peg$fail(peg$c66)
																		}
																	}
																	if (s1 !== peg$FAILED) {
																		s2 = peg$parseadditive()
																		if (s2 !== peg$FAILED) {
																			if (input.charCodeAt(peg$currPos) === 44) {
																				s3 = peg$c29
																				peg$currPos++
																			} else {
																				s3 = peg$FAILED
																				if (peg$silentFails === 0) {
																					peg$fail(peg$c30)
																				}
																			}
																			if (s3 !== peg$FAILED) {
																				s4 = peg$parseadditive()
																				if (s4 !== peg$FAILED) {
																					if (input.charCodeAt(peg$currPos) === 44) {
																						s5 = peg$c29
																						peg$currPos++
																					} else {
																						s5 = peg$FAILED
																						if (peg$silentFails === 0) {
																							peg$fail(peg$c30)
																						}
																					}
																					if (s5 !== peg$FAILED) {
																						s6 = peg$parseadditive()
																						if (s6 !== peg$FAILED) {
																							if (input.charCodeAt(peg$currPos) === 41) {
																								s7 = peg$c15
																								peg$currPos++
																							} else {
																								s7 = peg$FAILED
																								if (peg$silentFails === 0) {
																									peg$fail(peg$c16)
																								}
																							}
																							if (s7 !== peg$FAILED) {
																								peg$savedPos = s0
																								s1 = peg$c67(s2, s4, s6)
																								s0 = s1
																							} else {
																								peg$currPos = s0
																								s0 = peg$FAILED
																							}
																						} else {
																							peg$currPos = s0
																							s0 = peg$FAILED
																						}
																					} else {
																						peg$currPos = s0
																						s0 = peg$FAILED
																					}
																				} else {
																					peg$currPos = s0
																					s0 = peg$FAILED
																				}
																			} else {
																				peg$currPos = s0
																				s0 = peg$FAILED
																			}
																		} else {
																			peg$currPos = s0
																			s0 = peg$FAILED
																		}
																	} else {
																		peg$currPos = s0
																		s0 = peg$FAILED
																	}
																	if (s0 === peg$FAILED) {
																		s0 = peg$currPos
																		if (input.substr(peg$currPos, 5).toLowerCase() === peg$c68) {
																			s1 = input.substr(peg$currPos, 5)
																			peg$currPos += 5
																		} else {
																			s1 = peg$FAILED
																			if (peg$silentFails === 0) {
																				peg$fail(peg$c69)
																			}
																		}
																		if (s1 !== peg$FAILED) {
																			s2 = peg$parselist()
																			if (s2 !== peg$FAILED) {
																				if (input.charCodeAt(peg$currPos) === 41) {
																					s3 = peg$c15
																					peg$currPos++
																				} else {
																					s3 = peg$FAILED
																					if (peg$silentFails === 0) {
																						peg$fail(peg$c16)
																					}
																				}
																				if (s3 !== peg$FAILED) {
																					peg$savedPos = s0
																					s1 = peg$c70(s2)
																					s0 = s1
																				} else {
																					peg$currPos = s0
																					s0 = peg$FAILED
																				}
																			} else {
																				peg$currPos = s0
																				s0 = peg$FAILED
																			}
																		} else {
																			peg$currPos = s0
																			s0 = peg$FAILED
																		}
																		if (s0 === peg$FAILED) {
																			s0 = peg$currPos
																			if (input.substr(peg$currPos, 7).toLowerCase() === peg$c71) {
																				s1 = input.substr(peg$currPos, 7)
																				peg$currPos += 7
																			} else {
																				s1 = peg$FAILED
																				if (peg$silentFails === 0) {
																					peg$fail(peg$c72)
																				}
																			}
																			if (s1 !== peg$FAILED) {
																				s2 = peg$parselist()
																				if (s2 !== peg$FAILED) {
																					if (input.charCodeAt(peg$currPos) === 41) {
																						s3 = peg$c15
																						peg$currPos++
																					} else {
																						s3 = peg$FAILED
																						if (peg$silentFails === 0) {
																							peg$fail(peg$c16)
																						}
																					}
																					if (s3 !== peg$FAILED) {
																						peg$savedPos = s0
																						s1 = peg$c52(s2)
																						s0 = s1
																					} else {
																						peg$currPos = s0
																						s0 = peg$FAILED
																					}
																				} else {
																					peg$currPos = s0
																					s0 = peg$FAILED
																				}
																			} else {
																				peg$currPos = s0
																				s0 = peg$FAILED
																			}
																			if (s0 === peg$FAILED) {
																				s0 = peg$currPos
																				if (
																					input.substr(peg$currPos, 3).toLowerCase() === peg$c73
																				) {
																					s1 = input.substr(peg$currPos, 3)
																					peg$currPos += 3
																				} else {
																					s1 = peg$FAILED
																					if (peg$silentFails === 0) {
																						peg$fail(peg$c74)
																					}
																				}
																				if (s1 !== peg$FAILED) {
																					s2 = peg$parseadditive()
																					if (s2 !== peg$FAILED) {
																						if (input.charCodeAt(peg$currPos) === 41) {
																							s3 = peg$c15
																							peg$currPos++
																						} else {
																							s3 = peg$FAILED
																							if (peg$silentFails === 0) {
																								peg$fail(peg$c16)
																							}
																						}
																						if (s3 !== peg$FAILED) {
																							peg$savedPos = s0
																							s1 = peg$c75(s2)
																							s0 = s1
																						} else {
																							peg$currPos = s0
																							s0 = peg$FAILED
																						}
																					} else {
																						peg$currPos = s0
																						s0 = peg$FAILED
																					}
																				} else {
																					peg$currPos = s0
																					s0 = peg$FAILED
																				}
																				if (s0 === peg$FAILED) {
																					s0 = peg$currPos
																					if (
																						input.substr(peg$currPos, 4).toLowerCase() === peg$c76
																					) {
																						s1 = input.substr(peg$currPos, 4)
																						peg$currPos += 4
																					} else {
																						s1 = peg$FAILED
																						if (peg$silentFails === 0) {
																							peg$fail(peg$c77)
																						}
																					}
																					if (s1 !== peg$FAILED) {
																						s2 = peg$parseadditive()
																						if (s2 !== peg$FAILED) {
																							if (input.charCodeAt(peg$currPos) === 44) {
																								s3 = peg$c29
																								peg$currPos++
																							} else {
																								s3 = peg$FAILED
																								if (peg$silentFails === 0) {
																									peg$fail(peg$c30)
																								}
																							}
																							if (s3 !== peg$FAILED) {
																								s4 = peg$parseadditive()
																								if (s4 !== peg$FAILED) {
																									if (input.charCodeAt(peg$currPos) === 41) {
																										s5 = peg$c15
																										peg$currPos++
																									} else {
																										s5 = peg$FAILED
																										if (peg$silentFails === 0) {
																											peg$fail(peg$c16)
																										}
																									}
																									if (s5 !== peg$FAILED) {
																										peg$savedPos = s0
																										s1 = peg$c78(s2, s4)
																										s0 = s1
																									} else {
																										peg$currPos = s0
																										s0 = peg$FAILED
																									}
																								} else {
																									peg$currPos = s0
																									s0 = peg$FAILED
																								}
																							} else {
																								peg$currPos = s0
																								s0 = peg$FAILED
																							}
																						} else {
																							peg$currPos = s0
																							s0 = peg$FAILED
																						}
																					} else {
																						peg$currPos = s0
																						s0 = peg$FAILED
																					}
																					if (s0 === peg$FAILED) {
																						s0 = peg$currPos
																						if (
																							input.substr(peg$currPos, 4).toLowerCase() === peg$c79
																						) {
																							s1 = input.substr(peg$currPos, 4)
																							peg$currPos += 4
																						} else {
																							s1 = peg$FAILED
																							if (peg$silentFails === 0) {
																								peg$fail(peg$c80)
																							}
																						}
																						if (s1 !== peg$FAILED) {
																							s2 = peg$parselist()
																							if (s2 !== peg$FAILED) {
																								if (input.charCodeAt(peg$currPos) === 41) {
																									s3 = peg$c15
																									peg$currPos++
																								} else {
																									s3 = peg$FAILED
																									if (peg$silentFails === 0) {
																										peg$fail(peg$c16)
																									}
																								}
																								if (s3 !== peg$FAILED) {
																									peg$savedPos = s0
																									s1 = peg$c81(s2)
																									s0 = s1
																								} else {
																									peg$currPos = s0
																									s0 = peg$FAILED
																								}
																							} else {
																								peg$currPos = s0
																								s0 = peg$FAILED
																							}
																						} else {
																							peg$currPos = s0
																							s0 = peg$FAILED
																						}
																						if (s0 === peg$FAILED) {
																							s0 = peg$currPos
																							if (
																								input.substr(peg$currPos, 5).toLowerCase() ===
																								peg$c82
																							) {
																								s1 = input.substr(peg$currPos, 5)
																								peg$currPos += 5
																							} else {
																								s1 = peg$FAILED
																								if (peg$silentFails === 0) {
																									peg$fail(peg$c83)
																								}
																							}
																							if (s1 !== peg$FAILED) {
																								s2 = peg$parselist()
																								if (s2 !== peg$FAILED) {
																									if (input.charCodeAt(peg$currPos) === 41) {
																										s3 = peg$c15
																										peg$currPos++
																									} else {
																										s3 = peg$FAILED
																										if (peg$silentFails === 0) {
																											peg$fail(peg$c16)
																										}
																									}
																									if (s3 !== peg$FAILED) {
																										peg$savedPos = s0
																										s1 = peg$c84(s2)
																										s0 = s1
																									} else {
																										peg$currPos = s0
																										s0 = peg$FAILED
																									}
																								} else {
																									peg$currPos = s0
																									s0 = peg$FAILED
																								}
																							} else {
																								peg$currPos = s0
																								s0 = peg$FAILED
																							}
																							if (s0 === peg$FAILED) {
																								s0 = peg$currPos
																								if (
																									input.substr(peg$currPos, 7).toLowerCase() ===
																									peg$c85
																								) {
																									s1 = input.substr(peg$currPos, 7)
																									peg$currPos += 7
																								} else {
																									s1 = peg$FAILED
																									if (peg$silentFails === 0) {
																										peg$fail(peg$c86)
																									}
																								}
																								if (s1 !== peg$FAILED) {
																									s2 = peg$parselist()
																									if (s2 !== peg$FAILED) {
																										if (input.charCodeAt(peg$currPos) === 41) {
																											s3 = peg$c15
																											peg$currPos++
																										} else {
																											s3 = peg$FAILED
																											if (peg$silentFails === 0) {
																												peg$fail(peg$c16)
																											}
																										}
																										if (s3 !== peg$FAILED) {
																											peg$savedPos = s0
																											s1 = peg$c87(s2)
																											s0 = s1
																										} else {
																											peg$currPos = s0
																											s0 = peg$FAILED
																										}
																									} else {
																										peg$currPos = s0
																										s0 = peg$FAILED
																									}
																								} else {
																									peg$currPos = s0
																									s0 = peg$FAILED
																								}
																								if (s0 === peg$FAILED) {
																									s0 = peg$currPos
																									if (
																										input.substr(peg$currPos, 4).toLowerCase() ===
																										peg$c88
																									) {
																										s1 = input.substr(peg$currPos, 4)
																										peg$currPos += 4
																									} else {
																										s1 = peg$FAILED
																										if (peg$silentFails === 0) {
																											peg$fail(peg$c89)
																										}
																									}
																									if (s1 !== peg$FAILED) {
																										s2 = peg$parselist()
																										if (s2 !== peg$FAILED) {
																											if (input.charCodeAt(peg$currPos) === 41) {
																												s3 = peg$c15
																												peg$currPos++
																											} else {
																												s3 = peg$FAILED
																												if (peg$silentFails === 0) {
																													peg$fail(peg$c16)
																												}
																											}
																											if (s3 !== peg$FAILED) {
																												peg$savedPos = s0
																												s1 = peg$c90(s2)
																												s0 = s1
																											} else {
																												peg$currPos = s0
																												s0 = peg$FAILED
																											}
																										} else {
																											peg$currPos = s0
																											s0 = peg$FAILED
																										}
																									} else {
																										peg$currPos = s0
																										s0 = peg$FAILED
																									}
																									if (s0 === peg$FAILED) {
																										s0 = peg$currPos
																										if (
																											input.substr(peg$currPos, 4).toLowerCase() ===
																											peg$c91
																										) {
																											s1 = input.substr(peg$currPos, 4)
																											peg$currPos += 4
																										} else {
																											s1 = peg$FAILED
																											if (peg$silentFails === 0) {
																												peg$fail(peg$c92)
																											}
																										}
																										if (s1 !== peg$FAILED) {
																											s2 = peg$parseadditive()
																											if (s2 !== peg$FAILED) {
																												if (input.charCodeAt(peg$currPos) === 41) {
																													s3 = peg$c15
																													peg$currPos++
																												} else {
																													s3 = peg$FAILED
																													if (peg$silentFails === 0) {
																														peg$fail(peg$c16)
																													}
																												}
																												if (s3 !== peg$FAILED) {
																													peg$savedPos = s0
																													s1 = peg$c93(s2)
																													s0 = s1
																												} else {
																													peg$currPos = s0
																													s0 = peg$FAILED
																												}
																											} else {
																												peg$currPos = s0
																												s0 = peg$FAILED
																											}
																										} else {
																											peg$currPos = s0
																											s0 = peg$FAILED
																										}
																										if (s0 === peg$FAILED) {
																											s0 = peg$currPos
																											if (
																												input
																													.substr(peg$currPos, 5)
																													.toLowerCase() === peg$c94
																											) {
																												s1 = input.substr(peg$currPos, 5)
																												peg$currPos += 5
																											} else {
																												s1 = peg$FAILED
																												if (peg$silentFails === 0) {
																													peg$fail(peg$c95)
																												}
																											}
																											if (s1 !== peg$FAILED) {
																												s2 = peg$parseadditive()
																												if (s2 !== peg$FAILED) {
																													if (
																														input.charCodeAt(peg$currPos) === 44
																													) {
																														s3 = peg$c29
																														peg$currPos++
																													} else {
																														s3 = peg$FAILED
																														if (peg$silentFails === 0) {
																															peg$fail(peg$c30)
																														}
																													}
																													if (s3 !== peg$FAILED) {
																														s4 = peg$parseadditive()
																														if (s4 !== peg$FAILED) {
																															if (
																																input.charCodeAt(peg$currPos) === 41
																															) {
																																s5 = peg$c15
																																peg$currPos++
																															} else {
																																s5 = peg$FAILED
																																if (peg$silentFails === 0) {
																																	peg$fail(peg$c16)
																																}
																															}
																															if (s5 !== peg$FAILED) {
																																peg$savedPos = s0
																																s1 = peg$c96(s2, s4)
																																s0 = s1
																															} else {
																																peg$currPos = s0
																																s0 = peg$FAILED
																															}
																														} else {
																															peg$currPos = s0
																															s0 = peg$FAILED
																														}
																													} else {
																														peg$currPos = s0
																														s0 = peg$FAILED
																													}
																												} else {
																													peg$currPos = s0
																													s0 = peg$FAILED
																												}
																											} else {
																												peg$currPos = s0
																												s0 = peg$FAILED
																											}
																											if (s0 === peg$FAILED) {
																												s0 = peg$currPos
																												if (
																													input.substr(peg$currPos, 4) === peg$c97
																												) {
																													s1 = peg$c97
																													peg$currPos += 4
																												} else {
																													s1 = peg$FAILED
																													if (peg$silentFails === 0) {
																														peg$fail(peg$c98)
																													}
																												}
																												if (s1 !== peg$FAILED) {
																													peg$savedPos = s0
																													s1 = peg$c99()
																												}
																												s0 = s1
																												if (s0 === peg$FAILED) {
																													s0 = peg$currPos
																													if (
																														input
																															.substr(peg$currPos, 4)
																															.toLowerCase() === peg$c100
																													) {
																														s1 = input.substr(peg$currPos, 4)
																														peg$currPos += 4
																													} else {
																														s1 = peg$FAILED
																														if (peg$silentFails === 0) {
																															peg$fail(peg$c101)
																														}
																													}
																													if (s1 !== peg$FAILED) {
																														s2 = peg$parseadditive()
																														if (s2 !== peg$FAILED) {
																															if (
																																input.charCodeAt(peg$currPos) === 44
																															) {
																																s3 = peg$c29
																																peg$currPos++
																															} else {
																																s3 = peg$FAILED
																																if (peg$silentFails === 0) {
																																	peg$fail(peg$c30)
																																}
																															}
																															if (s3 !== peg$FAILED) {
																																s4 = peg$parseadditive()
																																if (s4 !== peg$FAILED) {
																																	if (
																																		input.charCodeAt(
																																			peg$currPos
																																		) === 41
																																	) {
																																		s5 = peg$c15
																																		peg$currPos++
																																	} else {
																																		s5 = peg$FAILED
																																		if (peg$silentFails === 0) {
																																			peg$fail(peg$c16)
																																		}
																																	}
																																	if (s5 !== peg$FAILED) {
																																		peg$savedPos = s0
																																		s1 = peg$c102(s2, s4)
																																		s0 = s1
																																	} else {
																																		peg$currPos = s0
																																		s0 = peg$FAILED
																																	}
																																} else {
																																	peg$currPos = s0
																																	s0 = peg$FAILED
																																}
																															} else {
																																peg$currPos = s0
																																s0 = peg$FAILED
																															}
																														} else {
																															peg$currPos = s0
																															s0 = peg$FAILED
																														}
																													} else {
																														peg$currPos = s0
																														s0 = peg$FAILED
																													}
																													if (s0 === peg$FAILED) {
																														s0 = peg$currPos
																														if (
																															input
																																.substr(peg$currPos, 11)
																																.toLowerCase() === peg$c103
																														) {
																															s1 = input.substr(peg$currPos, 11)
																															peg$currPos += 11
																														} else {
																															s1 = peg$FAILED
																															if (peg$silentFails === 0) {
																																peg$fail(peg$c104)
																															}
																														}
																														if (s1 !== peg$FAILED) {
																															s2 = peg$parseadditive()
																															if (s2 !== peg$FAILED) {
																																if (
																																	input.charCodeAt(peg$currPos) ===
																																	41
																																) {
																																	s3 = peg$c15
																																	peg$currPos++
																																} else {
																																	s3 = peg$FAILED
																																	if (peg$silentFails === 0) {
																																		peg$fail(peg$c16)
																																	}
																																}
																																if (s3 !== peg$FAILED) {
																																	peg$savedPos = s0
																																	s1 = peg$c105(s2)
																																	s0 = s1
																																} else {
																																	peg$currPos = s0
																																	s0 = peg$FAILED
																																}
																															} else {
																																peg$currPos = s0
																																s0 = peg$FAILED
																															}
																														} else {
																															peg$currPos = s0
																															s0 = peg$FAILED
																														}
																														if (s0 === peg$FAILED) {
																															s0 = peg$currPos
																															if (
																																input
																																	.substr(peg$currPos, 6)
																																	.toLowerCase() === peg$c106
																															) {
																																s1 = input.substr(peg$currPos, 6)
																																peg$currPos += 6
																															} else {
																																s1 = peg$FAILED
																																if (peg$silentFails === 0) {
																																	peg$fail(peg$c107)
																																}
																															}
																															if (s1 !== peg$FAILED) {
																																s2 = peg$parselist()
																																if (s2 !== peg$FAILED) {
																																	if (
																																		input.charCodeAt(
																																			peg$currPos
																																		) === 41
																																	) {
																																		s3 = peg$c15
																																		peg$currPos++
																																	} else {
																																		s3 = peg$FAILED
																																		if (peg$silentFails === 0) {
																																			peg$fail(peg$c16)
																																		}
																																	}
																																	if (s3 !== peg$FAILED) {
																																		peg$savedPos = s0
																																		s1 = peg$c108(s2)
																																		s0 = s1
																																	} else {
																																		peg$currPos = s0
																																		s0 = peg$FAILED
																																	}
																																} else {
																																	peg$currPos = s0
																																	s0 = peg$FAILED
																																}
																															} else {
																																peg$currPos = s0
																																s0 = peg$FAILED
																															}
																															if (s0 === peg$FAILED) {
																																s0 = peg$currPos
																																if (
																																	input
																																		.substr(peg$currPos, 8)
																																		.toLowerCase() === peg$c109
																																) {
																																	s1 = input.substr(peg$currPos, 8)
																																	peg$currPos += 8
																																} else {
																																	s1 = peg$FAILED
																																	if (peg$silentFails === 0) {
																																		peg$fail(peg$c110)
																																	}
																																}
																																if (s1 !== peg$FAILED) {
																																	s2 = peg$parselist()
																																	if (s2 !== peg$FAILED) {
																																		if (
																																			input.charCodeAt(
																																				peg$currPos
																																			) === 41
																																		) {
																																			s3 = peg$c15
																																			peg$currPos++
																																		} else {
																																			s3 = peg$FAILED
																																			if (peg$silentFails === 0) {
																																				peg$fail(peg$c16)
																																			}
																																		}
																																		if (s3 !== peg$FAILED) {
																																			peg$savedPos = s0
																																			s1 = peg$c111(s2)
																																			s0 = s1
																																		} else {
																																			peg$currPos = s0
																																			s0 = peg$FAILED
																																		}
																																	} else {
																																		peg$currPos = s0
																																		s0 = peg$FAILED
																																	}
																																} else {
																																	peg$currPos = s0
																																	s0 = peg$FAILED
																																}
																																if (s0 === peg$FAILED) {
																																	s0 = peg$currPos
																																	if (
																																		input
																																			.substr(peg$currPos, 6)
																																			.toLowerCase() === peg$c112
																																	) {
																																		s1 = input.substr(
																																			peg$currPos,
																																			6
																																		)
																																		peg$currPos += 6
																																	} else {
																																		s1 = peg$FAILED
																																		if (peg$silentFails === 0) {
																																			peg$fail(peg$c113)
																																		}
																																	}
																																	if (s1 !== peg$FAILED) {
																																		s2 = peg$parseadditive()
																																		if (s2 !== peg$FAILED) {
																																			if (
																																				input.charCodeAt(
																																					peg$currPos
																																				) === 41
																																			) {
																																				s3 = peg$c15
																																				peg$currPos++
																																			} else {
																																				s3 = peg$FAILED
																																				if (peg$silentFails === 0) {
																																					peg$fail(peg$c16)
																																				}
																																			}
																																			if (s3 !== peg$FAILED) {
																																				peg$savedPos = s0
																																				s1 = peg$c114(s2)
																																				s0 = s1
																																			} else {
																																				peg$currPos = s0
																																				s0 = peg$FAILED
																																			}
																																		} else {
																																			peg$currPos = s0
																																			s0 = peg$FAILED
																																		}
																																	} else {
																																		peg$currPos = s0
																																		s0 = peg$FAILED
																																	}
																																	if (s0 === peg$FAILED) {
																																		s0 = peg$currPos
																																		if (
																																			input
																																				.substr(peg$currPos, 4)
																																				.toLowerCase() === peg$c115
																																		) {
																																			s1 = input.substr(
																																				peg$currPos,
																																				4
																																			)
																																			peg$currPos += 4
																																		} else {
																																			s1 = peg$FAILED
																																			if (peg$silentFails === 0) {
																																				peg$fail(peg$c116)
																																			}
																																		}
																																		if (s1 !== peg$FAILED) {
																																			s2 = peg$parseadditive()
																																			if (s2 !== peg$FAILED) {
																																				if (
																																					input.charCodeAt(
																																						peg$currPos
																																					) === 41
																																				) {
																																					s3 = peg$c15
																																					peg$currPos++
																																				} else {
																																					s3 = peg$FAILED
																																					if (
																																						peg$silentFails === 0
																																					) {
																																						peg$fail(peg$c16)
																																					}
																																				}
																																				if (s3 !== peg$FAILED) {
																																					peg$savedPos = s0
																																					s1 = peg$c114(s2)
																																					s0 = s1
																																				} else {
																																					peg$currPos = s0
																																					s0 = peg$FAILED
																																				}
																																			} else {
																																				peg$currPos = s0
																																				s0 = peg$FAILED
																																			}
																																		} else {
																																			peg$currPos = s0
																																			s0 = peg$FAILED
																																		}
																																		if (s0 === peg$FAILED) {
																																			s0 = peg$currPos
																																			if (
																																				input
																																					.substr(peg$currPos, 4)
																																					.toLowerCase() ===
																																				peg$c117
																																			) {
																																				s1 = input.substr(
																																					peg$currPos,
																																					4
																																				)
																																				peg$currPos += 4
																																			} else {
																																				s1 = peg$FAILED
																																				if (peg$silentFails === 0) {
																																					peg$fail(peg$c118)
																																				}
																																			}
																																			if (s1 !== peg$FAILED) {
																																				s2 = peg$parseadditive()
																																				if (s2 !== peg$FAILED) {
																																					if (
																																						input.charCodeAt(
																																							peg$currPos
																																						) === 41
																																					) {
																																						s3 = peg$c15
																																						peg$currPos++
																																					} else {
																																						s3 = peg$FAILED
																																						if (
																																							peg$silentFails === 0
																																						) {
																																							peg$fail(peg$c16)
																																						}
																																					}
																																					if (s3 !== peg$FAILED) {
																																						peg$savedPos = s0
																																						s1 = peg$c119(s2)
																																						s0 = s1
																																					} else {
																																						peg$currPos = s0
																																						s0 = peg$FAILED
																																					}
																																				} else {
																																					peg$currPos = s0
																																					s0 = peg$FAILED
																																				}
																																			} else {
																																				peg$currPos = s0
																																				s0 = peg$FAILED
																																			}
																																			if (s0 === peg$FAILED) {
																																				s0 = peg$currPos
																																				if (
																																					input
																																						.substr(peg$currPos, 5)
																																						.toLowerCase() ===
																																					peg$c120
																																				) {
																																					s1 = input.substr(
																																						peg$currPos,
																																						5
																																					)
																																					peg$currPos += 5
																																				} else {
																																					s1 = peg$FAILED
																																					if (
																																						peg$silentFails === 0
																																					) {
																																						peg$fail(peg$c121)
																																					}
																																				}
																																				if (s1 !== peg$FAILED) {
																																					s2 = peg$parselist()
																																					if (s2 !== peg$FAILED) {
																																						if (
																																							input.charCodeAt(
																																								peg$currPos
																																							) === 41
																																						) {
																																							s3 = peg$c15
																																							peg$currPos++
																																						} else {
																																							s3 = peg$FAILED
																																							if (
																																								peg$silentFails ===
																																								0
																																							) {
																																								peg$fail(peg$c16)
																																							}
																																						}
																																						if (s3 !== peg$FAILED) {
																																							peg$savedPos = s0
																																							s1 = peg$c122(s2)
																																							s0 = s1
																																						} else {
																																							peg$currPos = s0
																																							s0 = peg$FAILED
																																						}
																																					} else {
																																						peg$currPos = s0
																																						s0 = peg$FAILED
																																					}
																																				} else {
																																					peg$currPos = s0
																																					s0 = peg$FAILED
																																				}
																																				if (s0 === peg$FAILED) {
																																					s0 = peg$currPos
																																					if (
																																						input
																																							.substr(
																																								peg$currPos,
																																								5
																																							)
																																							.toLowerCase() ===
																																						peg$c123
																																					) {
																																						s1 = input.substr(
																																							peg$currPos,
																																							5
																																						)
																																						peg$currPos += 5
																																					} else {
																																						s1 = peg$FAILED
																																						if (
																																							peg$silentFails === 0
																																						) {
																																							peg$fail(peg$c124)
																																						}
																																					}
																																					if (s1 !== peg$FAILED) {
																																						s2 = peg$parseadditive()
																																						if (s2 !== peg$FAILED) {
																																							if (
																																								input.charCodeAt(
																																									peg$currPos
																																								) === 41
																																							) {
																																								s3 = peg$c15
																																								peg$currPos++
																																							} else {
																																								s3 = peg$FAILED
																																								if (
																																									peg$silentFails ===
																																									0
																																								) {
																																									peg$fail(peg$c16)
																																								}
																																							}
																																							if (
																																								s3 !== peg$FAILED
																																							) {
																																								peg$savedPos = s0
																																								s1 = peg$c125(s2)
																																								s0 = s1
																																							} else {
																																								peg$currPos = s0
																																								s0 = peg$FAILED
																																							}
																																						} else {
																																							peg$currPos = s0
																																							s0 = peg$FAILED
																																						}
																																					} else {
																																						peg$currPos = s0
																																						s0 = peg$FAILED
																																					}
																																					if (s0 === peg$FAILED) {
																																						s0 = peg$currPos
																																						if (
																																							input
																																								.substr(
																																									peg$currPos,
																																									7
																																								)
																																								.toLowerCase() ===
																																							peg$c126
																																						) {
																																							s1 = input.substr(
																																								peg$currPos,
																																								7
																																							)
																																							peg$currPos += 7
																																						} else {
																																							s1 = peg$FAILED
																																							if (
																																								peg$silentFails ===
																																								0
																																							) {
																																								peg$fail(peg$c127)
																																							}
																																						}
																																						if (s1 !== peg$FAILED) {
																																							s2 = peg$parselist()
																																							if (
																																								s2 !== peg$FAILED
																																							) {
																																								if (
																																									input.charCodeAt(
																																										peg$currPos
																																									) === 41
																																								) {
																																									s3 = peg$c15
																																									peg$currPos++
																																								} else {
																																									s3 = peg$FAILED
																																									if (
																																										peg$silentFails ===
																																										0
																																									) {
																																										peg$fail(
																																											peg$c16
																																										)
																																									}
																																								}
																																								if (
																																									s3 !== peg$FAILED
																																								) {
																																									peg$savedPos = s0
																																									s1 = peg$c128(s2)
																																									s0 = s1
																																								} else {
																																									peg$currPos = s0
																																									s0 = peg$FAILED
																																								}
																																							} else {
																																								peg$currPos = s0
																																								s0 = peg$FAILED
																																							}
																																						} else {
																																							peg$currPos = s0
																																							s0 = peg$FAILED
																																						}
																																						if (s0 === peg$FAILED) {
																																							s0 = peg$currPos
																																							if (
																																								input
																																									.substr(
																																										peg$currPos,
																																										4
																																									)
																																									.toLowerCase() ===
																																								peg$c129
																																							) {
																																								s1 = input.substr(
																																									peg$currPos,
																																									4
																																								)
																																								peg$currPos += 4
																																							} else {
																																								s1 = peg$FAILED
																																								if (
																																									peg$silentFails ===
																																									0
																																								) {
																																									peg$fail(peg$c130)
																																								}
																																							}
																																							if (
																																								s1 !== peg$FAILED
																																							) {
																																								s2 = peg$parselist()
																																								if (
																																									s2 !== peg$FAILED
																																								) {
																																									if (
																																										input.charCodeAt(
																																											peg$currPos
																																										) === 41
																																									) {
																																										s3 = peg$c15
																																										peg$currPos++
																																									} else {
																																										s3 = peg$FAILED
																																										if (
																																											peg$silentFails ===
																																											0
																																										) {
																																											peg$fail(
																																												peg$c16
																																											)
																																										}
																																									}
																																									if (
																																										s3 !==
																																										peg$FAILED
																																									) {
																																										peg$savedPos = s0
																																										s1 = peg$c131(
																																											s2
																																										)
																																										s0 = s1
																																									} else {
																																										peg$currPos = s0
																																										s0 = peg$FAILED
																																									}
																																								} else {
																																									peg$currPos = s0
																																									s0 = peg$FAILED
																																								}
																																							} else {
																																								peg$currPos = s0
																																								s0 = peg$FAILED
																																							}
																																							if (
																																								s0 === peg$FAILED
																																							) {
																																								s0 = peg$currPos
																																								if (
																																									input
																																										.substr(
																																											peg$currPos,
																																											4
																																										)
																																										.toLowerCase() ===
																																									peg$c132
																																								) {
																																									s1 = input.substr(
																																										peg$currPos,
																																										4
																																									)
																																									peg$currPos += 4
																																								} else {
																																									s1 = peg$FAILED
																																									if (
																																										peg$silentFails ===
																																										0
																																									) {
																																										peg$fail(
																																											peg$c133
																																										)
																																									}
																																								}
																																								if (
																																									s1 !== peg$FAILED
																																								) {
																																									s2 = peg$parseadditive()
																																									if (
																																										s2 !==
																																										peg$FAILED
																																									) {
																																										if (
																																											input.charCodeAt(
																																												peg$currPos
																																											) === 41
																																										) {
																																											s3 = peg$c15
																																											peg$currPos++
																																										} else {
																																											s3 = peg$FAILED
																																											if (
																																												peg$silentFails ===
																																												0
																																											) {
																																												peg$fail(
																																													peg$c16
																																												)
																																											}
																																										}
																																										if (
																																											s3 !==
																																											peg$FAILED
																																										) {
																																											peg$savedPos = s0
																																											s1 = peg$c134(
																																												s2
																																											)
																																											s0 = s1
																																										} else {
																																											peg$currPos = s0
																																											s0 = peg$FAILED
																																										}
																																									} else {
																																										peg$currPos = s0
																																										s0 = peg$FAILED
																																									}
																																								} else {
																																									peg$currPos = s0
																																									s0 = peg$FAILED
																																								}
																																								if (
																																									s0 === peg$FAILED
																																								) {
																																									s0 = peg$currPos
																																									if (
																																										input
																																											.substr(
																																												peg$currPos,
																																												13
																																											)
																																											.toLowerCase() ===
																																										peg$c135
																																									) {
																																										s1 = input.substr(
																																											peg$currPos,
																																											13
																																										)
																																										peg$currPos += 13
																																									} else {
																																										s1 = peg$FAILED
																																										if (
																																											peg$silentFails ===
																																											0
																																										) {
																																											peg$fail(
																																												peg$c136
																																											)
																																										}
																																									}
																																									if (
																																										s1 !==
																																										peg$FAILED
																																									) {
																																										s2 = peg$parseadditive()
																																										if (
																																											s2 !==
																																											peg$FAILED
																																										) {
																																											if (
																																												input.charCodeAt(
																																													peg$currPos
																																												) === 41
																																											) {
																																												s3 = peg$c15
																																												peg$currPos++
																																											} else {
																																												s3 = peg$FAILED
																																												if (
																																													peg$silentFails ===
																																													0
																																												) {
																																													peg$fail(
																																														peg$c16
																																													)
																																												}
																																											}
																																											if (
																																												s3 !==
																																												peg$FAILED
																																											) {
																																												peg$savedPos = s0
																																												s1 = peg$c137(
																																													s2
																																												)
																																												s0 = s1
																																											} else {
																																												peg$currPos = s0
																																												s0 = peg$FAILED
																																											}
																																										} else {
																																											peg$currPos = s0
																																											s0 = peg$FAILED
																																										}
																																									} else {
																																										peg$currPos = s0
																																										s0 = peg$FAILED
																																									}
																																									if (
																																										s0 ===
																																										peg$FAILED
																																									) {
																																										s0 = peg$currPos
																																										if (
																																											input
																																												.substr(
																																													peg$currPos,
																																													17
																																												)
																																												.toLowerCase() ===
																																											peg$c138
																																										) {
																																											s1 = input.substr(
																																												peg$currPos,
																																												17
																																											)
																																											peg$currPos += 17
																																										} else {
																																											s1 = peg$FAILED
																																											if (
																																												peg$silentFails ===
																																												0
																																											) {
																																												peg$fail(
																																													peg$c139
																																												)
																																											}
																																										}
																																										if (
																																											s1 !==
																																											peg$FAILED
																																										) {
																																											s2 = peg$parseadditive()
																																											if (
																																												s2 !==
																																												peg$FAILED
																																											) {
																																												if (
																																													input.charCodeAt(
																																														peg$currPos
																																													) === 41
																																												) {
																																													s3 = peg$c15
																																													peg$currPos++
																																												} else {
																																													s3 = peg$FAILED
																																													if (
																																														peg$silentFails ===
																																														0
																																													) {
																																														peg$fail(
																																															peg$c16
																																														)
																																													}
																																												}
																																												if (
																																													s3 !==
																																													peg$FAILED
																																												) {
																																													peg$savedPos = s0
																																													s1 = peg$c140(
																																														s2
																																													)
																																													s0 = s1
																																												} else {
																																													peg$currPos = s0
																																													s0 = peg$FAILED
																																												}
																																											} else {
																																												peg$currPos = s0
																																												s0 = peg$FAILED
																																											}
																																										} else {
																																											peg$currPos = s0
																																											s0 = peg$FAILED
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		return s0
	}

	function peg$parselist() {
		var s0, s1, s2, s3

		s0 = peg$currPos
		if (input.charCodeAt(peg$currPos) === 91) {
			s1 = peg$c141
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c142)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parselistElements()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 93) {
					s3 = peg$c143
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c144)
					}
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c145(s2)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseadditive()
		}

		return s0
	}

	function peg$parselistElements() {
		var s0, s1, s2, s3

		s0 = peg$currPos
		s1 = peg$parseadditive()
		if (s1 !== peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 44) {
				s2 = peg$c29
				peg$currPos++
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c30)
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parselistElements()
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c146(s1, s3)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseadditive()
		}

		return s0
	}

	function peg$parseatom() {
		var s0

		s0 = peg$parsenumber()
		if (s0 === peg$FAILED) {
			s0 = peg$parsevar()
			if (s0 === peg$FAILED) {
				s0 = peg$parseconstant()
			}
		}

		return s0
	}

	function peg$parseconstant() {
		var s0, s1

		s0 = peg$currPos
		if (input.charCodeAt(peg$currPos) === 101) {
			s1 = peg$c147
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c148)
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c149()
		}
		s0 = s1
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			if (input.substr(peg$currPos, 2).toLowerCase() === peg$c150) {
				s1 = input.substr(peg$currPos, 2)
				peg$currPos += 2
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c151)
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0
				s1 = peg$c152()
			}
			s0 = s1
		}

		return s0
	}

	function peg$parsenumber() {
		var s0

		s0 = peg$parsefloat()
		if (s0 === peg$FAILED) {
			s0 = peg$parseinteger()
		}

		return s0
	}

	function peg$parsefloat() {
		var s0, s1, s2, s3

		s0 = peg$currPos
		s1 = peg$parseinteger()
		if (s1 !== peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 46) {
				s2 = peg$c153
				peg$currPos++
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c154)
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parseinteger()
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c155(s1, s3)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}

		return s0
	}

	function peg$parseinteger() {
		var s0, s1, s2

		s0 = peg$currPos
		s1 = []
		if (peg$c156.test(input.charAt(peg$currPos))) {
			s2 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s2 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c157)
			}
		}
		if (s2 !== peg$FAILED) {
			while (s2 !== peg$FAILED) {
				s1.push(s2)
				if (peg$c156.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos)
					peg$currPos++
				} else {
					s2 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c157)
					}
				}
			}
		} else {
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c158(s1)
		}
		s0 = s1

		return s0
	}

	function peg$parsevar() {
		var s0, s1, s2, s3, s4

		s0 = peg$currPos
		s1 = peg$parsename()
		if (s1 !== peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 91) {
				s2 = peg$c141
				peg$currPos++
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c142)
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parseadditive()
				if (s3 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 93) {
						s4 = peg$c143
						peg$currPos++
					} else {
						s4 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c144)
						}
					}
					if (s4 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c159(s1, s3)
						s0 = s1
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			s1 = peg$parsename()
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0
				s1 = peg$c160(s1)
			}
			s0 = s1
		}

		return s0
	}

	function peg$parsename() {
		var s0, s1, s2, s3

		s0 = peg$currPos
		if (peg$c161.test(input.charAt(peg$currPos))) {
			s1 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c162)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = []
			if (peg$c163.test(input.charAt(peg$currPos))) {
				s3 = input.charAt(peg$currPos)
				peg$currPos++
			} else {
				s3 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c164)
				}
			}
			while (s3 !== peg$FAILED) {
				s2.push(s3)
				if (peg$c163.test(input.charAt(peg$currPos))) {
					s3 = input.charAt(peg$currPos)
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c164)
					}
				}
			}
			if (s2 !== peg$FAILED) {
				peg$savedPos = s0
				s1 = peg$c165(s1, s2)
				s0 = s1
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}

		return s0
	}

	const numberToWords = x => x

	const constants = {
		e: Math.E,
		pi: Math.PI
	}

	function factorial(n) {
		if (n === 0 || n === 1) {
			return 1
		}

		for (var i = n - 1; i >= 1; i--) {
			n *= i
		}

		return n
	}

	function combination(n, k) {
		return factorial(n) / (factorial(k) * factorial(n - k))
	}

	function cosecant(n) {
		return 1 / Math.sin(n)
	}

	function cotangent(n) {
		return 1 / Math.tan(n)
	}

	function degToRad(n) {
		return n * (Math.PI / 180)
	}

	function permuation(n, k) {
		return factorial(n) / factorial(n - k)
	}

	function radToDeg(n) {
		return n * (180 / Math.PI)
	}

	function secant(n) {
		return 1 / Math.cos(n)
	}

	function mean(list) {
		return list.reduce((p, c) => p + c) / list.length
	}

	function median(list) {
		list = [].concat(list)

		list.sort()

		const half = Math.floor(list.length / 2)

		if (list.length % 2) {
			return list[half]
		}

		return (list[half - 1] + list[half]) / 2
	}

	function range(list) {
		return Math.max.apply(list) - Math.min.apply(list)
	}

	function standardDeviation(list) {
		const m = mean(list)
		const squares = list.map(n => Math.pow(n - m, 2))
		const squaresMean = mean(squares)

		return Math.sqrt(squaresMean)
	}

	peg$result = peg$startRuleFunction()

	if (peg$result !== peg$FAILED && peg$currPos === input.length) {
		return peg$result
	} else {
		if (peg$result !== peg$FAILED && peg$currPos < input.length) {
			peg$fail(peg$endExpectation())
		}

		throw peg$buildStructuredError(
			peg$maxFailExpected,
			peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
			peg$maxFailPos < input.length
				? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
				: peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
		)
	}
}

module.exports = {
	SyntaxError: peg$SyntaxError,
	parse: peg$parse
}
